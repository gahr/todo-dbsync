#!/usr/bin/env bash

# Copyright (C) 2020 Pietro Cerutti <gahr@gahr.ch>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# A Dropbox sync action for todo.txt
# Usage: todo dbsync

# Where your todo.txt files are stored in Dropbox
TODO_DROPBOX_PATH=/todo.txt

TODO_FILE=${TODO_FILE:-}
DONE_FILE=${DONE_FILE:-}
REPORT_FILE=${REPORT_FILE:-}
TODO_HOME=${TODO_HOME:-}

if [ -z "${TODO_FILE}" ] || [ -z "${DONE_FILE}" ] || \
   [ -z "${REPORT_FILE}" ] || [ -z "${TODO_HOME}" ]; then
    echo "Required TODO variables not set"
    exit 1
fi

# What you want to sync
TODO_DROPBOX_FILES="${TODO_FILE} ${DONE_FILE} ${REPORT_FILE}"

##############################################################################

DB_FILES_ENDPOINT=https://api.dropboxapi.com/2/files
DB_CONTENT_ENDPOINT=https://content.dropboxapi.com/2/files
DB_APP_WEBSITE=https://www.dropbox.com/developers/apps
DB_TOKEN_FILE="${TODO_HOME}"/dbsynctoken 

TZ=UTC

function epoch_to_iso()
{
    epoch="${1}"

    date -j -f %s "${epoch}" +"%Y-%m-%dT%H:%M:%SZ"
}

function iso_to_epoch()
{
    iso="${1}"

    date -j -f '%Y-%m-%dT%H:%M:%SZ' "${iso}" +%s 
}

function db_gen_token()
{
    echo "Follow these instructions to generate a Dropbox access token:"
    echo ""
    echo " 1. Log into the Dropbox apps page: ${DB_APP_WEBSITE}"
    echo " 2. Click on \"Create app\""
    echo " 3. At the \"Choose an API\" step, select \"Scoped access\""
    echo " 4. At the \"Choose the type of access you need\" step, select \"Full Dropbox\""
    echo " 5. Choose a unique and descriptive name for your app"
    echo " 6. Click on \"Create app\""
    echo " 7. In the \"Permissions\" tab, select these scopes:"
    echo "    - files.metadata.write"
    echo "    - files.metadata.read (implicit with write)"
    echo "    - files.content.write"
    echo "    - files.content.read"
    echo " 8. Click on \"Submit\""
    echo " 9. In the \"Settings\" tab, under the \"OAuth 2\" section, select"
    echo "    \"No expiration\" under \"Access token expiration\" and click on"
    echo "    the \"generate\" button under \"Generate access token\""
    echo " "
    read -rp "10. Insert here the generated access token: " token
    if [ -z "${token}" ]; then
        echo "Invalid token"
        exit 1
    fi
    echo "${token}" | (umask 266 && cat > "${DB_TOKEN_FILE}")
}

function db_path()
{
    file="${1}"

    echo "${TODO_DROPBOX_PATH}"/"$(basename "${file}")"
}

function db_call()
{
    endpoint=${1}
    shift
    args=$*

    eval curl --silent --request POST \
        --header \'Authorization: Bearer "$(cat "${DB_TOKEN_FILE}")"\' \
                "${endpoint}" "${args}"
}

function db_up()
{
    file="${1}"

    db_file=$(db_path "${file}")
    ltime=$(epoch_to_iso "$(local_time "${file}")")
    # shellcheck disable=SC1083
    body=$(db_call "${DB_CONTENT_ENDPOINT}"/upload \
        --header \'Dropbox-API-Arg: \
            { \"path\"            : \""${db_file}"\", \
              \"client_modified\" : \""${ltime}"\",   \
              \"mode\"            : \"overwrite\" \
            }\' \
        --header \'Content-Type: application/octet-stream\' \
        --data-binary @"${file}")
    echo "${body}"
}

function db_down()
{
    file="${1}"

    db_file=$(db_path "${file}")
    # shellcheck disable=SC1083
    body=$(db_call "${DB_CONTENT_ENDPOINT}"/download \
        --header \'Dropbox-API-Arg: { \"path\" : \""${db_file}"\" }\' \
        -o "${file}")
    echo "${body}"
}

function db_metadata()
{
    file="${1}"

    db_file="$(db_path "${file}")"

    # shellcheck disable=SC1083
    db_call "${DB_FILES_ENDPOINT}"/get_metadata \
        --header \'Content-Type: application/json\' \
        --data \'{\"path\": \""${db_file}"\"}\'
}

function metadata_hash()
{
    metadata="${1}"

    echo "${metadata}" | jq -r .content_hash
}

function metadata_time()
{
    metadata="${1}"

    iso_to_epoch "$(echo "${metadata}" | jq -r .client_modified)"
}

function raw_sha256()
{
    openssl dgst -sha256 -hex | awk '{print $2}'
}

function math_add()
{
    x="${1}"
    y="${2}"

    dc -e "${x} ${y} + p"
}

function math_mul()
{
    x="${1}"
    y="${2}"

    dc -e "${x} ${y} * p"
}

function math_div()
{
    x="${1}"
    y="${2}"

    dc -e "${x} ${y} / p"
}

function math_inc()
{
    x="${1}"

    math_add "${x}" 1
}

function local_hash()
{
    file="${1}"

    size=$(stat -f %z "${file}")
    bsize=4194304
    blocks=$(math_div "${size}" "${bsize}")
    if [ "$(math_mul "${blocks}" "${bsize}")" -lt "${size}" ]; then
        blocks=$(math_inc "${blocks}")
    fi
    hash=""
    block=0
    while [ "${block}" -lt "${blocks}" ]; do
        bhash=$(dd bs="${bsize}" count=1 skip="${block}" if="${file}" 2> /dev/null | raw_sha256)
        hash="${hash}${bhash}"
        block=$(math_inc "${block}")
    done
    # shellcheck disable=SC2001
    echo -ne "$(echo "${hash}" | sed 's|\(..\)|\\x\1|g')" | raw_sha256
}

function local_time()
{
    file="${1}"

    stat -f "%m" "${file}"
}

function is_yes()
{
    s="${1}"

    [ "${s}" = yes ] || [ "${s}" = YES ] || [ "${s}" = Y ] || [ "${s}" = y ]
}

function ask()
{
    prompt="${1}"
    default="${2}"

    if is_yes "${default}"; then
        choice="[Yn]"
    else
        choice="[yN]"
    fi

    read -rp "${prompt}? ${choice} " resp
    if [ -z "${resp}" ]; then
        resp="${default}"
    fi

    is_yes "${resp}"
}

function sync_one()
{
    file="${1}"

    metadata=$(db_metadata "${file}")

    lhash=$(local_hash "${file}")
    rhash=$(metadata_hash "${metadata}")
    if [ "${rhash}" = "null" ]; then
        ask "${file} is newer, upload" yes && db_up "${file}"
        return
    fi
    if [ "${lhash}" = "${rhash}" ]; then
        echo "${file} hasn't changed"
        return
    fi

    ltime=$(local_time "${file}")
    rtime=$(metadata_time "${metadata}")
    if [ "${ltime}" -lt "${rtime}" ]; then
        ask "${file} is older, download" yes && db_down "${file}"
    elif [ "${rtime}" -lt "${ltime}" ]; then
        ask "${file} is newer, upload" yes && db_up "${file}"
    fi
}

function sync()
{
    files="${1}"

    for f in ${files}; do
        sync_one "${f}"
    done
}

action=${1}
shift

function usage()
{
    echo "  Synchronize with dropbox:"
    echo "    dbsync"
    echo ""
    exit
}

[ "${action}" = "usage" ] && usage

while [ ! -f "${DB_TOKEN_FILE}" ]; do
    db_gen_token
done
sync "${TODO_DROPBOX_FILES}"

# vim: ts=4 sw=4 expandtab:
